@*

*@
@{
    ViewBag.CurrentPageName = null; // The menu item will be active for this page.
}
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/lib/vue/dist/vue.min.js"></script>
<link href="~/node_modules/element-ui/lib/theme-chalk/index.css" rel="stylesheet" />
<link href="~/node_modules/form-making/dist/FormMaking.css" rel="stylesheet" />
<script src="~/node_modules/element-ui/lib/index.js"></script>
<script src="~/node_modules/form-making/dist/FormMaking.umd.min.js"></script>
<script src="~/node_modules/form-making/public/lib/ace/src-min/ace.js"></script>

<div class="row clearfix" id="lockRow">
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
        <div class="card">
            <div class="header">
                <h2>
                    @L("PreviewSheet") : @ViewBag.Title
                </h2>
                @if (ViewBag.IsAnonymous == true)
                {@L("AnswerSheetIsAnonymous")}
            </div>
            <div class="body table-responsive" id="app" v-loading="loading">
                <el-form>
                    <el-form-item label="校区">
                        <el-select v-model="XQKey" placeholder="请选择" @@change="onXQChanged">
                            <el-option v-for="item in XQKeys"
                                       :key="item.key"
                                       :label="item.displayMember"
                                       :value="item.id">
                            </el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item label="院系">
                        <el-select v-model="YXKey" placeholder="请选择" @@change="onYXChanged">
                            <el-option v-for="item in YXKeys"
                                       :key="item.key"
                                       :label="item.displayMember"
                                       :value="item.id">
                            </el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item label="专业">
                        <el-select v-model="ZYKey" placeholder="请选择" @@change="onZYChanged">
                            <el-option v-for="item in ZYKeys"
                                       :key="item.key"
                                       :label="item.displayMember"
                                       :value="item.id">
                            </el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item label="班级">
                        <el-select v-model="BJKey" placeholder="请选择">
                            <el-option v-for="item in BJKeys"
                                       :key="item.key"
                                       :label="item.displayMember"
                                       :value="item.id">
                            </el-option>
                        </el-select>
                    </el-form-item>
                </el-form>
                <fm-generate-form :data="jsonData" @@on-change="onSomeChanged"
                                  ref="generateForm">
                </fm-generate-form>
                <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
                    <button type="button" class="btn btn-primary waves-effect align-center" onclick="Submit()" data-toggle="modal">
                        @L("Submit")
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var id = '@ViewBag.Id';
    var parent = null;
    var dto = {};
    var listWhere = null;
    var formJson = null;
    var appObj = {
        loading: true,
        XQKey: null,
        XQKeys: [],
        YXKey: null,
        YXKeys: [],
        ZYKey: null,
        ZYKeys: [],
        BJKey: null,
        BJKeys:[]
    };
    $(function () {
        abp.ui.setBusy('#lockRow');
        abp.services.app.basicDataMaintenance.getCascaderByKeyword('XQKey', appObj.XQKey, null).done(function (data) {
            appObj.XQKeys = data;
        });
           abp.services.app.basicDataMaintenance.getCascaderByKeyword('YXKey', appObj.XQKey, null).done(function (data) {
               appObj.YXKeys = data;
           });
        abp.services.app.questionnaire.getQuestionnaireLinkageListByItemId(id, null).done(function (list) {
            listWhere = list;
            abp.services.app.questionnaire.getQuestionnaireFormById(id, null).done(function (data) {
                 var listToHide = [];
                for (var i = 0; i < list.length; i++) {
                    listToHide.push(list[i].name);
                }
                //parent.$refs.generateForm.setJSON(JSON.parse(data));
                //var a = parent.$refs.generateForm;
                formJson = JSON.parse(data);
                appObj.jsonData = formJson;
                    parent = new Vue({
                    el: '#app',
                        data() {
                            return appObj//{ jsonData: formJson }
                   },
                methods: {
                    onSomeChanged: function (field, value, formData) {
                        var listToShow = [];
                        var listToHide = [];
                        for (var i = 0; i < listWhere.length; i++) {//全部的条件
                            if (listWhere[i].parentName == field) {//存在一样de
                                for (var j = 0; j < formJson.list.length; j++) {//判断表单内的类型
                                    if (formJson.list[j].name == field) {//一样则进入
                                        if (formJson.list[j].type == 'rate') {//评分型进入
                                            if (listWhere[i].showCondition == 1) {//大于判断模式
                                                if (value >= listWhere[i].targetValue) {
                                                    listToShow.push(listWhere[i].name);//超过目标值,显示
                                                }
                                                else {
                                                    listToHide.push(listWhere[i].name);//未超过目标值,不显示
                                                    //获取父级为被隐藏的选项一并隐藏
                                                    for (var k = 0; k < listWhere.length; k++) {
                                                        if (listWhere[k].parentName == listWhere[i].name) {
                                                            listToHide.push(listWhere[k].name);
                                                        }
                                                    }
                                                }
                                            }
                                            else if (listWhere[i].showCondition == 2) {//小于
                                                if (value < listWhere[i].targetValue) {
                                                    listToShow.push(listWhere[i].name);//低于目标值,显示
                                                }
                                                else {
                                                    listToHide.push(listWhere[i].name);//未低于目标值,不显示
                                                    //获取父级为被隐藏的选项一并隐藏
                                                    for (var k = 0; k < listWhere.length; k++) {
                                                        if (listWhere[k].parentName == listWhere[i].name) {
                                                            listToHide.push(listWhere[k].name);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else {//否则未文本型
                                            if (value.indexOf(listWhere[i].targetValue) != -1) {//包含型
                                                listToShow.push(listWhere[i].name);//超过目标值,显示
                                            }
                                            else {
                                                listToHide.push(listWhere[i].name);//未超过目标值,不显示
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        parent.$refs.generateForm.display(listToShow);
                        parent.$refs.generateForm.hide(listToHide);
                    },
                    onXQChanged: function () {

                    },
                    onYXChanged: function () {
                        appObj.ZYKey = null;
                        appObj.BJKey = null;
                        abp.services.app.basicDataMaintenance.getCascaderByKeywordParent('ZYKey', appObj.YXKey, null).done(function (data) {
                            appObj.ZYKeys = data;
                        });
                    },
                    onZYChanged: function () {
                        appObj.BJKey = null;
                        abp.services.app.basicDataMaintenance.getCascaderByKeywordParent('BJKey', appObj.ZYKey, null).done(function (data) {
                            appObj.BJKeys = data;
                        });
                    },
                     }
                    });
                parent.$refs.generateForm.hide(listToHide);
                appObj.loading = false;
                abp.ui.clearBusy('#lockRow');
             });
         });
    });

    function Submit() {
        if (appObj.XQKey == null) {
            parent.$message({ message: '请选择校区', type: 'warning' });
            return;
        }
        if (appObj.YXKey == null) {
            parent.$message({ message: '请选择院系', type: 'warning' });
            return;
        }
        if (appObj.ZYKey == null) {
            parent.$message({ message: '请选择专业', type: 'warning' });
            return;
        }
        if (appObj.BJKey == null) {
            parent.$message({ message: '请选择班级', type: 'warning' });
            return;
        }
        parent.$refs.generateForm.getData().then(data => {
            dto.questionnaireItemId = id;
            dto.questionnaireAnswer = JSON.stringify(data);
            dto.xQKey = appObj.XQKey;
            dto.yXKey = appObj.YXKey;
            dto.zYKey = appObj.ZYKey;
            dto.bJKey = appObj.BJKey;
            abp.services.app.questionnaire.submitQuestionnaireAnswer(dto, null).done(function (data) {
                abp.message.success('提交成功', '', false);
            }).fail(function (data) {
                debugger;
                abp.message.error('提交失败', '', false);
            });
            // 数据获取成功
        }).catch(e => {
            //debugger;
            abp.message.error('请完成必填项', '', false);
            // 数据校验失败
        });
    }
</script>
